#!/usr/bin/env python3
"""
Configuration setup script for the Kubernetes monitoring system.

This script helps users set up their environment configuration by
creating a .env file with their specific settings.
"""

import os
import sys
from pathlib import Path


def create_env_file():
    """Create a .env file with user input."""
    print("=" * 60)
    print("Kubernetes Monitoring System - Configuration Setup")
    print("=" * 60)
    
    env_file = Path(".env")
    
    if env_file.exists():
        response = input("\n.env file already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return False
    
    print("\nThis script will help you create a .env configuration file.")
    print("Press Enter to use default values or type 'skip' to skip optional settings.\n")
    
    config = {}
    
    # LLM API Configuration
    print("1. LLM API Configuration")
    print("-" * 30)
    
    nvidia_key = input("NVIDIA API Key (required for AI features): ").strip()
    if nvidia_key:
        config["NVIDIA_API_KEY"] = nvidia_key
    
    llama_key = input("Llama API Key (optional): ").strip()
    if llama_key and llama_key.lower() != 'skip':
        config["LLAMA_API_KEY"] = llama_key
    
    openai_key = input("OpenAI API Key (optional): ").strip()
    if openai_key and openai_key.lower() != 'skip':
        config["OPENAI_API_KEY"] = openai_key
    
    # Server Configuration
    print("\n2. Server Configuration")
    print("-" * 30)
    
    api_port = input("API Server Port (default: 8000): ").strip()
    if api_port and api_port.lower() != 'skip':
        config["API_SERVER_PORT"] = api_port
    
    dashboard_port = input("Dashboard API Port (default: 5000): ").strip()
    if dashboard_port and dashboard_port.lower() != 'skip':
        config["DASHBOARD_API_PORT"] = dashboard_port
    
    # Kubernetes Configuration
    print("\n3. Kubernetes Configuration")
    print("-" * 30)
    
    namespace = input("Default Kubernetes namespace (default: default): ").strip()
    if namespace and namespace.lower() != 'skip':
        config["K8S_NAMESPACE"] = namespace
    
    test_mode = input("Enable test mode? (y/N): ").strip().lower()
    if test_mode == 'y':
        config["K8S_TEST_MODE"] = "true"
    
    # External Services
    print("\n4. External Services")
    print("-" * 30)
    
    prometheus_url = input("Prometheus URL (optional): ").strip()
    if prometheus_url and prometheus_url.lower() != 'skip':
        config["PROMETHEUS_URL"] = prometheus_url
    
    # Logging Configuration
    print("\n5. Logging Configuration")
    print("-" * 30)
    
    log_level = input("Log level (DEBUG/INFO/WARNING/ERROR, default: INFO): ").strip().upper()
    if log_level and log_level in ["DEBUG", "INFO", "WARNING", "ERROR"]:
        config["LOG_LEVEL"] = log_level
    
    log_file = input("Log file path (optional, logs to console if not set): ").strip()
    if log_file and log_file.lower() != 'skip':
        config["LOG_FILE"] = log_file
    
    # Write the .env file
    print("\n6. Writing Configuration")
    print("-" * 30)
    
    try:
        with open(env_file, 'w') as f:
            f.write("# Kubernetes Monitoring System Configuration\n")
            f.write("# Generated by setup script\n\n")
            
            if config:
                for key, value in config.items():
                    f.write(f"{key}={value}\n")
            else:
                f.write("# No custom configuration provided\n")
                f.write("# Using default values\n")
        
        print(f"✓ Configuration written to {env_file}")
        
        # Test the configuration
        print("\n7. Testing Configuration")
        print("-" * 30)
        
        # Import and test the configuration
        sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
        
        try:
            from config.loader import get_config, validate_environment
            
            config_obj = get_config(str(env_file))
            is_valid = validate_environment()
            
            if is_valid:
                print("✓ Configuration is valid and ready to use")
            else:
                print("⚠ Configuration has warnings but should work")
            
            print(f"\nConfiguration Summary:")
            print(f"- API Server: {config_obj.api.api_server_host}:{config_obj.api.api_server_port}")
            print(f"- Dashboard API: {config_obj.api.dashboard_api_port}")
            print(f"- Log Level: {config_obj.logging.level}")
            print(f"- Test Mode: {config_obj.kubernetes.test_mode}")
            
            api_keys = []
            if config_obj.api.nvidia_api_key:
                api_keys.append("NVIDIA")
            if config_obj.api.llama_api_key:
                api_keys.append("Llama")
            if config_obj.api.openai_api_key:
                api_keys.append("OpenAI")
            
            if api_keys:
                print(f"- API Keys: {', '.join(api_keys)}")
            else:
                print("- API Keys: None configured")
            
        except Exception as e:
            print(f"⚠ Configuration test failed: {e}")
            print("The .env file was created but may need manual adjustment.")
        
        print("\n" + "=" * 60)
        print("Setup completed successfully!")
        print("\nNext steps:")
        print("1. Review the .env file and adjust settings if needed")
        print("2. Run 'python backend/src/config/test_config.py' to test the configuration")
        print("3. Start the services using the updated configuration")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"✗ Failed to write configuration: {e}")
        return False


def main():
    """Main setup function."""
    try:
        success = create_env_file()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\nUnexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()