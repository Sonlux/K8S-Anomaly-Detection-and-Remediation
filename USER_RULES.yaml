# USER_RULES.yaml

project:
  name: Kubernetes Monitoring, RAG, and Dashboard System
  description: |
    A full-stack solution for monitoring Kubernetes clusters, anomaly detection, remediation, and natural language Q&A using RAG and LLMs, with a modern React dashboard.

prerequisites:
  backend:
    - Python 3.8+
    - Minikube (for local K8s)
    - kubectl
    - Prometheus (optional)
    - LLM API keys (NVIDIA, Llama, etc.)
  frontend:
    - Node.js (use nvm if possible)
    - npm

setup:
  backend:
    - cd backend
    - pip install -r requirements.txt
    - Create a .env file with:
        - LLAMA_API_KEY=your_llama_api_key
        - LLAMA_API_URL=your_llama_api_url
        - NVIDIA_API_KEY=your_nvidia_api_key
    - uvicorn src.api.api_server:app --host 0.0.0.0 --port 8000
  frontend:
    - cd frontend
    - npm install
    - npm run dev

usage:
  backend:
    - |
      POST /api/chat with body:
        {"message": "..."}
    - python agentic_rag_cli.py for CLI chat
    - python test_rag_fix.py for RAG system test
  frontend:
    - Access dashboard at http://localhost:5173

coding_conventions:
  python:
    - Follow PEP8 style
    - Use type hints
    - Add docstrings to all public classes and functions
    - Use logging, not print, for diagnostics
  react:
    - Use TypeScript for all components
    - Use functional components and hooks
    - Use shadcn-ui and Tailwind for UI
    - Keep components modular and reusable

devops:
  version_control:
    - Use feature branches for new development
    - Use clear, conventional commit messages (feat:, fix:, docs:, etc.)
    - All merges require peer review
    - Never commit secrets or API keys
  ci_cd:
    - All code must pass linting and tests before merging
    - Use requirements.txt and package.json for dependency management
    - Automate builds and deployments where possible
  kubernetes:
    - All manifests (deployments, services, etc.) must be version-controlled as YAML
    - Use ConfigMaps and Secrets for configuration and sensitive data
    - Apply least privilege to all service accounts and roles

testing:
  - Write unit, integration, and end-to-end tests for all major features
  - Use mock data for tests where possible
  - Run python test_rag_fix.py to verify RAG system
  - Use npm run lint for frontend linting

troubleshooting:
  - If LLM returns generic answers, check that real-time data is being passed to the prompt
  - If you see "NVIDIA_API_KEY not set", ensure your .env is correct
  - If Minikube is not detected, run minikube start
  - For import errors, check requirements.txt and package.json

documentation:
  - Keep README.md and subdirectory READMEs up to date
  - Document all new features and API endpoints
  - Add code comments for complex logic

contact:
  - For issues, open a GitHub issue or contact the project maintainer
